<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!--
     This will automatically locate any and all property files you have within your classpath, provided they fall under
     the META-INF/spring directory. The located property files are parsed and their values can then be used within application
     context files in the form of ${propertyKey}.
     -->
    <!--<context:property-placeholder location="classpath:errorHandling.properties"/>-->

    <task:annotation-driven/>

    <!--
     This declaration will cause Spring to locate every @Component, @Repository and @Service in your application. In
     practical terms this allows you to write a POJO and then simply annotate the new POJO as an @Service and Spring will automatically
     detect, instantiate and dependency inject your service at startup time. Importantly, you can then also have your new service
     injected into any other class that requires it simply by declaring a field for your service inside the relying class and
     Spring will inject it. Refer to web.xml for more details about the web tier application context setup services.

     Furthermore, this turns on @Autowired, @PostConstruct etc support. These annotations allow you to use common Spring
     and Java Enterprise Edition annotations in your classes without needing to do any special configuration. The most commonly
     used annotation is @Autowired, which instructs Spring to dependency inject an object into your class.
     -->
    <context:component-scan base-package="com.test"/>

    <!-- Activate Spring annotation support -->
    <context:annotation-config/>

    <!--
     Turn on AspectJ @Configurable support. As a result, any time you instantiate an object, Spring will attempt to perform
     dependency injection on that object. This occurs for instantiation via the "new" keyword, as well as via reflection. This
     is possible because AspectJ is used to "weave" Virtuoso-based applications at compile time. In effect this feature allows dependency
     injection of any object at all in your system, which is a very useful feature (without @Configurable you'd only be able to
     dependency inject objects acquired from Spring or subsequently presented to a specific Spring dependency injection method).
     Virtuoso applications use this useful feature in a number of areas, such as @PersistenceContext injection into entities.
     -->
    <context:spring-configured/>

    <!--<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="location">-->
            <!--<value>errorHandling.properties</value>-->
        <!--</property>-->
    <!--</bean>-->
</beans>
